// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PontoAPonto.Data.Contexts;

#nullable disable

namespace PontoAPonto.Data.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20240801142205_UrlPfpDriver")]
    partial class UrlPfpDriver
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PontoAPonto.Domain.Models.Entities.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Birthday")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsFirstAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<double>("Reputation")
                        .HasColumnType("double");

                    b.Property<DateTime?>("ResetTokenExpiracy")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UrlProfilePicute")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Drivers", (string)null);
                });

            modelBuilder.Entity("PontoAPonto.Domain.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("Birthday")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsFirstAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<double>("Reputation")
                        .HasColumnType("double");

                    b.Property<DateTime?>("ResetTokenExpiracy")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PontoAPonto.Domain.Models.Entities.Driver", b =>
                {
                    b.OwnsOne("PontoAPonto.Domain.Models.CarInfo", "CarInfo", b1 =>
                        {
                            b1.Property<Guid>("DriverId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Plate")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Year")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("DriverId");

                            b1.ToTable("Drivers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DriverId");
                        });

                    b.OwnsOne("PontoAPonto.Domain.Models.Otp", "Otp", b1 =>
                        {
                            b1.Property<Guid>("DriverId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Attempts")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Expiracy")
                                .HasColumnType("datetime(6)");

                            b1.Property<bool>("IsVerified")
                                .HasColumnType("tinyint(1)");

                            b1.Property<int>("Password")
                                .HasColumnType("int");

                            b1.HasKey("DriverId");

                            b1.ToTable("Drivers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DriverId");
                        });

                    b.OwnsOne("PontoAPonto.Domain.Models.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("DriverId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("DriverId");

                            b1.ToTable("Drivers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DriverId");
                        });

                    b.Navigation("CarInfo");

                    b.Navigation("Location");

                    b.Navigation("Otp")
                        .IsRequired();
                });

            modelBuilder.Entity("PontoAPonto.Domain.Models.Entities.User", b =>
                {
                    b.OwnsOne("PontoAPonto.Domain.Models.Otp", "Otp", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Attempts")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Expiracy")
                                .HasColumnType("datetime(6)");

                            b1.Property<bool>("IsVerified")
                                .HasColumnType("tinyint(1)");

                            b1.Property<int>("Password")
                                .HasColumnType("int");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Otp")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
